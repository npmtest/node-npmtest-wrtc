{"/home/travis/build/npmtest/node-npmtest-wrtc/test.js":"/* istanbul instrument in package npmtest_wrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wrtc/lib.npmtest_wrtc.js":"/* istanbul instrument in package npmtest_wrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wrtc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wrtc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wrtc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wrtc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wrtc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wrtc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wrtc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wrtc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wrtc.__dirname + '/lib.npmtest_wrtc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/index.js":"exports.RTCIceCandidate       = require('./icecandidate');\nexports.RTCPeerConnection     = require('./peerconnection');\nexports.RTCSessionDescription = require('./sessiondescription');","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/icecandidate.js":"function RTCIceCandidate(candidateInitDict) {\n  'use strict';\n  if(candidateInitDict) {\n    this.candidate     = candidateInitDict.candidate;\n    this.sdpMid        = candidateInitDict.sdpMid;\n    this.sdpMLineIndex = candidateInitDict.sdpMLineIndex;\n  }\n}\n\nmodule.exports = RTCIceCandidate;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/peerconnection.js":"var path = require('path');\nvar binary = require('node-pre-gyp');\nvar path = require('path');\n//var binding_opts = require(path.resolve(path.join(__dirname, '../build/wrtc.json')));\nvar binding_path = binary.find(path.resolve(path.join(__dirname,'../package.json')));\nvar _webrtc = require(binding_path);\n\nvar EventTarget = require('./eventtarget');\n\nvar RTCDataChannel            = require('./datachannel');\nvar RTCDataChannelEvent       = require('./datachannelevent');\nvar RTCError                  = require('./error');\nvar RTCIceCandidate           = require('./icecandidate');\nvar RTCPeerConnectionIceEvent = require('./rtcpeerconnectioniceevent');\nvar RTCSessionDescription     = require('./sessiondescription');\nvar RTCStatsResponse          = require('./rtcstatsresponse');\n\nfunction RTCPeerConnection(configuration, constraints) {\n  'use strict';\n  var that = this\n    , pc = new _webrtc.PeerConnection(configuration, constraints)\n    , localType = null\n    , remoteType = null\n    , queue = []\n    , pending = null\n    , dataChannels = {};  // open data channels, indexed by label\n\n  EventTarget.call(this);\n\n  function checkClosed() {\n//    if(this._closed) {\n//      throw new Error('Peer is closed');\n//    }\n  }\n\n  function executeNext() {\n    if(queue.length > 0) {\n      var obj = queue.shift();\n\n      pc[obj.func].apply(pc, obj.args);\n\n      if(obj.wait)\n      {\n        pending = obj;\n      } else {\n        executeNext();\n      }\n    } else {\n      pending = null;\n    }\n  }\n\n  function queueOrRun(obj) {\n    checkClosed();\n\n    if(null === pending) {\n      pc[obj.func].apply(pc, obj.args);\n\n      if(obj.wait) {\n        pending = obj;\n      }\n    } else {\n      queue.push(obj);\n    }\n  }\n\n  function runImmediately(obj) {\n    checkClosed();\n\n    return pc[obj.func].apply(pc, obj.args);\n  }\n\n  //\n  // Attach events to the native PeerConnection object\n  //\n\n  pc.onerror = function onerror() {\n    if(pending && pending.onError) {\n      pending.onError.apply(that, arguments);\n    }\n\n    executeNext();\n  };\n\n  pc.onsuccess = function onsuccess() {\n    if(pending && pending.onSuccess) {\n      pending.onSuccess.apply(that, arguments);\n    }\n\n    executeNext();\n  };\n\n  pc.onicecandidate = function onicecandidate(candidate, sdpMid, sdpMLineIndex) {\n    var icecandidate = new RTCIceCandidate({\n      candidate:     candidate,\n      sdpMid:        sdpMid,\n      sdpMLineIndex: sdpMLineIndex\n    });\n\n    that.dispatchEvent(new RTCPeerConnectionIceEvent('icecandidate', {candidate: icecandidate}));\n  };\n\n  pc.onsignalingstatechange = function onsignalingstatechange(state) {\n    var stateString = that.RTCSignalingStates[state];\n\n    if('closed' === stateString) {\n      Object.keys(dataChannels).forEach(function(label) {\n        dataChannels[label].shutdown();\n\n        delete dataChannels[label];\n      });\n    }\n\n    that.dispatchEvent({type: 'signalingstatechange'});\n  };\n\n  pc.oniceconnectionstatechange = function oniceconnectionstatechange(state) {\n    that.dispatchEvent({type: 'iceconnectionstatechange'});\n  };\n\n  pc.onicegatheringstatechange = function onicegatheringstatechange(state) {\n    that.dispatchEvent({type: 'icegatheringstatechange'});\n\n    // if we have completed gathering candidates, trigger a null candidate event\n    if (that.RTCIceGatheringStates[state] === 'complete') {\n      that.dispatchEvent(new RTCPeerConnectionIceEvent('icecandidate', {candidate: null}));\n    }\n  };\n\n  // [ToDo] onnegotiationneeded\n\n  pc.ondatachannel = function ondatachannel(internalDC) {\n    dataChannels[internalDC.label] = internalDC;\n\n    var dc = new RTCDataChannel(internalDC);\n\n    that.dispatchEvent(new RTCDataChannelEvent('datachannel', {channel: dc}));\n  };\n\n  //\n  // PeerConnection properties & attributes\n  //\n\n  Object.defineProperties(this, {\n    'localDescription': {\n      get: function getLocalDescription() {\n        var sdp = pc.localDescription;\n        if(!sdp) {\n          return null;\n        }\n        return new RTCSessionDescription({ type: localType, sdp: sdp });\n      }\n    },\n    'remoteDescription': {\n      get: function getRemoteDescription() {\n        var sdp = pc.remoteDescription;\n        if(!sdp) {\n          return null;\n        }\n        return new RTCSessionDescription({ type: remoteType, sdp: sdp });\n      }\n    },\n    'signalingState': {\n      get: function getSignalingState() {\n        var state = pc.signalingState;\n        return this.RTCSignalingStates[state];\n      }\n    },\n    'readyState': {\n      get: function getReadyState() {\n        return pc.getReadyState();\n      }\n    },\n    'iceGatheringState': {\n      get: function getIceGatheringState() {\n        var state = pc.iceGatheringState;\n        return this.RTCIceGatheringStates[state];\n      }\n    },\n    'iceConnectionState': {\n      get: function getIceConnectionState() {\n        var state = pc.iceConnectionState;\n        return this.RTCIceConnectionStates[state];\n      }\n    }\n  });\n\n  this.createOffer = function createOffer(){\n    var call = function call(options, successCallback, failureCallback) {\n      queueOrRun({\n        func: 'createOffer',\n        args: [options],\n        wait: true,\n        onSuccess: function(sdp) {\n          successCallback.call(this, new RTCSessionDescription({type: 'offer', sdp: sdp}));\n        },\n        onError: failureCallback\n      });\n    };\n\n    if (arguments.length === 0 || arguments.length === 1 && typeof arguments[0] === 'object') {      \n      // Promise-based call.\n      var options = (arguments.length === 1) ? arguments[0] : {};\n      return new Promise(function createOfferPromise(resolve, reject) {\n        call(options, resolve, reject);\n      });\n    } else if (arguments.length >= 2\n        && typeof arguments[0] === 'function'\n        && typeof arguments[1] === 'function'\n        && (arguments.length === 2 || typeof arguments[2] === 'object')) {\n      // Legacy method.\n      var options = (arguments.length === 3) ? arguments[2] : {};\n      call(options, arguments[0], arguments[1]);\n    } else {\n      throw new Error('Invalid call to createOffer - function must either have prototype'\n        + ' ([config]) or (successCallback, failureCallback, [config]).');\n    }\n  };\n\n  this.createAnswer = function createAnswer(){\n    var call = function call(options, successCallback, failureCallback) {\n      queueOrRun({\n        func: 'createAnswer',\n        args: [options],\n        wait: true,\n        onSuccess: function(sdp) {\n          successCallback.call(this, new RTCSessionDescription({type: 'answer', sdp: sdp}));\n        },\n        onError: failureCallback\n      });\n    };\n\n    if (arguments.length === 0 || arguments.length === 1 && typeof arguments[0] === 'object') {      \n      // Promise-based call.\n      var options = (arguments.length === 1) ? arguments[0] : {};\n      return new Promise(function createAnswerPromise(resolve, reject) {\n        call(options, resolve, reject);\n      });\n    } else if (arguments.length >= 2\n        && typeof arguments[0] === 'function'\n        && typeof arguments[1] === 'function') {\n      // Legacy method.\n      call({}, arguments[0], arguments[1]);\n    } else {\n      throw new Error('Invalid call to createAnswer - function must either have prototype'\n        + ' (void) or (successCallback, failureCallback).');\n    }\n  };\n\n  this.setLocalDescription = function setLocalDescription(){\n    var call = function call(description, successCallback, failureCallback) {\n      localType = description.type;\n\n      queueOrRun({\n        func: 'setLocalDescription',\n        args: [description],\n        wait: true,\n        onSuccess: successCallback,\n        onError: failureCallback\n      });\n    };\n\n    var error = new Error('Invalid call to setLocalDescription - function must either have prototype'\n        + ' (description) or (description, successCallback, failureCallback).');\n\n    if (arguments.length >= 1 && typeof arguments[0] === 'object') {      \n      var description = arguments[0];\n\n      if(arguments.length === 1) {\n        // Promise-based call.\n        return new Promise(function setLocalDescriptionPromise(resolve, reject) {\n          call(description, resolve, reject);\n        });\n      } else if (arguments.length >= 3\n          && typeof arguments[1] === 'function'\n          && typeof arguments[2] === 'function') {\n        // Legacy method.\n        call(description, arguments[1], arguments[2]);\n      } else {\n        throw error;\n      }\n\n    } else {\n      throw error;\n    }\n  };\n\n  this.setRemoteDescription = function setRemoteDescription(){\n    var call = function call(description, successCallback, failureCallback) {\n      remoteType = description.type;\n\n      queueOrRun({\n        func: 'setRemoteDescription',\n        args: [description],\n        wait: true,\n        onSuccess: successCallback,\n        onError: failureCallback\n      });\n    };\n\n    var error = new Error('Invalid call to setRemoteDescription - function must either have prototype'\n        + ' (description) or (description, successCallback, failureCallback).');\n\n    if (arguments.length >= 1 && typeof arguments[0] === 'object') {      \n      var description = arguments[0];\n\n      if(arguments.length === 1) {\n        // Promise-based call.\n        return new Promise(function setRemoteDescriptionPromise(resolve, reject) {\n          call(description, resolve, reject);\n        });\n      } else if (arguments.length >= 3\n          && typeof arguments[1] === 'function'\n          && typeof arguments[2] === 'function') {\n        // Legacy method.\n        call(description, arguments[1], arguments[2]);\n      } else {\n        throw error;\n      }\n\n    } else {\n      throw error;\n    }\n  };\n\n  this.addIceCandidate = function addIceCandidate(){\n    var call = function call(candidate, successCallback, failureCallback) {\n      queueOrRun({\n        func: 'addIceCandidate',\n        args: [{'candidate':     candidate.candidate,\n                'sdpMid':        candidate.sdpMid,\n                'sdpMLineIndex': candidate.sdpMLineIndex\n               }],\n        wait: true,\n        onSuccess: successCallback,\n        onError: failureCallback\n      });\n    };\n\n    var error = new Error('Invalid call to addIceCandidate - function must either have prototype'\n        + ' (candidate) or (candidate, successCallback, failureCallback).');\n\n    if (arguments.length >= 1 && typeof arguments[0] === 'object') {      \n      var candidate = arguments[0];\n\n      if(arguments.length === 1) {\n        // Promise-based call.\n        return new Promise(function addIceCandidatePromise(resolve, reject) {\n          call(candidate, resolve, reject);\n        });\n      } else if (arguments.length >= 3\n          && typeof arguments[1] === 'function'\n          && typeof arguments[2] === 'function') {\n        // Legacy method.\n        call(candidate, arguments[1], arguments[2]);\n      } else {\n        throw error;\n      }\n\n    } else {\n      throw error;\n    }\n  };\n\n  this.createDataChannel = function createDataChannel(label, dataChannelDict) {\n    dataChannelDict = dataChannelDict || {};\n\n    var channel = runImmediately({\n      func: 'createDataChannel',\n      args: [label, dataChannelDict]\n    });\n\n    dataChannels[label] = channel;\n    return new RTCDataChannel(channel);\n  };\n\n  this.getStats = function getStats(onSuccess, onFailure) {\n    pc.getStats(function(internalRTCStatsResponse) {\n      onSuccess(new RTCStatsResponse(internalRTCStatsResponse));\n    }, onFailure);\n  };\n\n  this.close = function close() {\n    return runImmediately({\n      func: 'close',\n      args: []\n    });\n  };\n}\n\nRTCPeerConnection.prototype.RTCIceConnectionStates = [\n  'new',\n  'checking',\n  'connected',\n  'completed',\n  'failed',\n  'disconnected',\n  'closed'\n];\n\nRTCPeerConnection.prototype.RTCIceGatheringStates = [\n  'new',\n  'gathering',\n  'complete'\n];\n\nRTCPeerConnection.prototype.RTCSignalingStates = [\n  'stable',\n  'have-local-offer',\n  'have-local-pranswer',\n  'have-remote-offer',\n  'have-remote-pranswer',\n  'closed'\n];\n\n\nmodule.exports = RTCPeerConnection;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/eventtarget.js":"/**\n * @author mrdoob / http://mrdoob.com/\n * @author Jesús Leganés Combarro \"Piranna\" <piranna@gmail.com>\n */\n\nvar EventTarget = function()\n{\n\tvar listeners = {};\n\n\tthis.addEventListener = function(type, listener)\n\t{\n\t\tif(listeners[type] === undefined)\n\t\t\tlisteners[type] = [];\n\n\t\tif(listeners[type].indexOf(listener) === -1)\n\t\t\tlisteners[type].push(listener);\n\t};\n\n\tthis.dispatchEvent = function(event)\n\t{\n\t\tprocess.nextTick(function() {\n\t\t\tvar listenerArray = (listeners[event.type] || []);\n\n\t\t\tvar dummyListener = this['on' + event.type];\n\t\t\tif(typeof dummyListener == 'function')\n\t\t\t\tlistenerArray = listenerArray.concat(dummyListener);\n\n\t\t\tfor(var i=0, l=listenerArray.length; i<l; i++)\n\t\t\t\tlistenerArray[i].call(this, event);\n\t\t}.bind(this));\n\t};\n\n\tthis.removeEventListener = function(type, listener)\n\t{\n\t\tvar index = listeners[type].indexOf(listener);\n\n\t\tif(index !== -1)\n\t\t\tlisteners[type].splice(index, 1);\n\t};\n};\n\nmodule.exports = EventTarget;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/datachannel.js":"var EventTarget = require('./eventtarget');\n\nvar RTCDataChannelMessageEvent = require('./datachannelmessageevent');\n\nfunction RTCDataChannel(internalDC) {\n  'use strict';\n  var that = this;\n\n  EventTarget.call(this);\n\n  internalDC.onerror = function onerror() {\n    that.dispatchEvent({type: 'error'});\n  };\n\n  internalDC.onmessage = function onmessage(data) {\n    that.dispatchEvent(new RTCDataChannelMessageEvent(data));\n  };\n\n  internalDC.onstatechange = function onstatechange(state) {\n    state = that.RTCDataStates[state];\n    switch(state) {\n      case 'open':\n        that.dispatchEvent({type: 'open'});\n        break;\n\n      case 'closed':\n        that.dispatchEvent({type: 'close'});\n        break;\n    }\n  };\n\n  Object.defineProperties(this, {\n    'bufferedAmount': {\n      get: function getBufferedAmount() {\n        return internalDC.bufferedAmount;\n      }\n    },\n    'label': {\n      get: function getLabel() {\n        return internalDC.label;\n      }\n    },\n    'readyState': {\n      get: function getReadyState() {\n        var state = internalDC.readyState;\n        return this.RTCDataStates[state];\n      }\n    },\n    'binaryType': {\n      get: function getBinaryType() {\n        var type = internalDC.binaryType;\n        return this.BinaryTypes[type];\n      },\n      set: function(type) {\n        var typenum = this.BinaryTypes.indexOf(type);\n        if(typenum >= 0) {\n          internalDC.binaryType = typenum;\n        }\n      }\n    }\n  });\n\n  this.send = function send(data) {\n    internalDC.send(data);\n  };\n\n  this.close = function close() {\n    internalDC.close();\n  };\n}\n\nRTCDataChannel.prototype.RTCDataStates = [\n  'connecting',\n  'open',\n  'closing',\n  'closed'\n];\n\nRTCDataChannel.prototype.BinaryTypes = [\n  'blob',  // Note: not sure what to do about this, since node doesn't have a Blob API\n  'arraybuffer'\n];\n\nmodule.exports = RTCDataChannel;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/datachannelmessageevent.js":"function RTCDataChannelMessageEvent(message) {\n  'use strict';\n  this.data = message;\n}\nRTCDataChannelMessageEvent.prototype.type = 'message';\n\nmodule.exports = RTCDataChannelMessageEvent;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/datachannelevent.js":"function RTCDataChannelEvent(type, eventInitDict) {\n  'use strict';\n  Object.defineProperties(this, {\n    'type': {\n      value: type,\n      enumerable: true\n    },\n    'channel': {\n      value: eventInitDict.channel,\n      enumerable: true\n    }\n  });\n}\n\nmodule.exports = RTCDataChannelEvent;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/error.js":"function RTCError(code, message) {\n  'use strict';\n  this.name = this.reasonName[Math.min(code, this.reasonName.length - 1)];\n  this.message = (typeof message === 'string')? message : this.name;\n}\n\nmodule.exports = RTCError;\n\nRTCError.prototype.reasonName = [\n  // These strings must match those defined in the WebRTC spec.\n  'NO_ERROR', // Should never happen -- only used for testing\n  'INVALID_CONSTRAINTS_TYPE',\n  'INVALID_CANDIDATE_TYPE',\n  'INVALID_STATE',\n  'INVALID_SESSION_DESCRIPTION',\n  'INCOMPATIBLE_SESSION_DESCRIPTION',\n  'INCOMPATIBLE_CONSTRAINTS',\n  'INTERNAL_ERROR'\n];\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/rtcpeerconnectioniceevent.js":"function RTCPeerConnectionIceEvent(type, eventInitDict) {\n  'use strict';\n  Object.defineProperties(this, {\n    'type': {\n      value: type,\n      enumerable: true\n    },\n    'candidate': {\n      value: eventInitDict.candidate,\n      enumerable: true\n    }\n  });\n}\n\nmodule.exports = RTCPeerConnectionIceEvent;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/sessiondescription.js":"function RTCSessionDescription(descriptionInitDict) {\n  'use strict';\n  if(descriptionInitDict) {\n    this.type = descriptionInitDict.type;\n    this.sdp = descriptionInitDict.sdp;\n  }\n}\n\nmodule.exports = RTCSessionDescription;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/rtcstatsresponse.js":"function RTCStatsResponse(internalRTCStatsResponse) {\n  'use strict';\n\n  this.result = function result() {\n    return internalRTCStatsResponse.result();\n  };\n}\n\nmodule.exports = RTCStatsResponse;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/browser.js":"var RTCIceCandidate       = window.mozRTCIceCandidate       || window.webkitRTCIceCandidate       || window.RTCIceCandidate;\nvar RTCPeerConnection     = window.mozRTCPeerConnection     || window.webkitRTCPeerConnection     || window.RTCPeerConnection;\nvar RTCSessionDescription = window.mozRTCSessionDescription || window.webkitRTCSessionDescription || window.RTCSessionDescription;\n\nexports.RTCIceCandidate       = RTCIceCandidate;\nexports.RTCPeerConnection     = RTCPeerConnection;\nexports.RTCSessionDescription = RTCSessionDescription;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/lib/rtcstatsreport.js":"function RTCStatsReport(internalRTCStatsReport) {\n  'use strict';\n\n  Object.defineProperties(this, {\n    'timestamp': {\n      value: internalRTCStatsReport.timestamp\n    },\n    'type': {\n      value: internalRTCStatsReport.type\n    }\n  });\n\n  this.names = function names() {\n    return internalRTCStatsReport.names();\n  };\n\n  this.stat = function stat(name) {\n    return internalRTCStatsReport.stat(name);\n  };\n}\n\nmodule.exports = RTCStatsReport;\n","/home/travis/build/npmtest/node-npmtest-wrtc/node_modules/wrtc/scripts/download-webrtc-libraries-and-headers.js":"#!/usr/bin/env node\n\nvar download = require('download');\nvar execSync = require('child_process').execSync;\nvar fs = require('fs');\nvar gunzip = require('gunzip-maybe');\nvar path = require('path');\nvar tar = require('tar-fs');\nvar url = require('url');\n\n/**\n * @typedef {object} Options\n * @property {string} [arch] - the architecture to download or build for\n * @property {BinaryOptions} [binary] - node-pre-gyp-style configuration\n * @property {string} [branch] - the WebRTC branch head\n * @property {boolean} [buildWebRTC] - whether or not to build from source if binaries are unavailable\n * @property {string} [buildWebRTCDependency] - the build-webrtc package to use\n * @property {string} [commit] - the WebRTC commit\n * @property {string} [platform] - the platform to download or build for\n * @property {boolean} [skipDownload] - skipDownload implies buildWebRTC\n */\n\n/**\n * These options are modeled after node-pre-gyp.\n * @typedef {object} BinaryOptions\n * @property {string} [host] - the host to download libraries and headers from\n * @property {string} [module_name] - the name of the libraries and headers\n * @property {string} [module_path] - the path to extract the libraries and headers to\n * @property {string} [remote_path] - the path to the libraries and headers on the host\n * @property {string} [package_name] - the name of the package on the host\n */\n\nvar defaults = {\n  arch: process.arch,\n  binary: {\n    host: 'https://webrtc-libraries-and-headers.s3.amazonaws.com',\n    module_name: 'webrtc',\n    module_path: 'third_party/webrtc',\n    remote_path: 'v1/build',\n    package_name: '{module_name}-{branch}+{commit}.{platform}.{arch}.tar.gz'\n  },\n  buildWebRTC: false,\n  buildWebRTCDependency: 'build-webrtc@0.1',\n  branch: '50',\n  commit: '49f7bd3',\n  platform: process.platform,\n  skipDownload: false\n};\n\nvar options = {\n  arch: process.env.TARGET_ARCH || defaults.arch,\n  binary: defaults.binary,\n  buildWebRTC: process.env.BUILD_WEBRTC ? true : defaults.buildWebRTC,\n  buildWebRTCDependency: process.env.BUILD_WEBRTC_DEPENDENCY || defaults.buildWebRTCDependency,\n  branch: process.env.WEBRTC_BRANCH || defaults.branch,\n  commit: process.env.WEBRTC_COMMIT || defaults.commit,\n  platform: process.env.TARGET_PLATFORM || defaults.platform,\n  skipDownload: process.env.SKIP_DOWNLOAD ? true : defaults.skipDownload\n};\n\n/**\n * Perform variable substitution on a string.\n * @param {string} str\n * @param {Options} options\n * @returns {stirng}\n */\nfunction printf(str, options) {\n  return str\n    .replace(/{arch}/g, options.arch)\n    .replace(/{branch}/g, options.branch)\n    .replace(/{commit}/g, options.commit)\n    .replace(/{module_name}/g, options.binary.module_name)\n    .replace(/{platform}/g, options.platform);\n}\n\n/**\n * Compute the module path to extract WebRTC libraries and headers to.\n * @param {BinaryOptions} binary\n * @returns {string}\n */\nfunction computeModulePath(binary) {\n  return path.join(__dirname, '..', binary.module_path);\n}\n\n/**\n * Compute the URL of the WebRTC libraries and headers download.\n * @param {Options} options\n * @returns {string}\n */\nfunction computeUrl(options) {\n  var packageName = printf(options.binary.package_name, options);\n  var remotePath = printf(options.binary.remote_path, options);\n  return url.resolve(\n    options.binary.host,\n    remotePath + '/' + encodeURIComponent(packageName));\n}\n\n/**\n * Check whether a path exists.\n * @param {string} path\n * @returns {boolean}\n */\nfunction exists(path) {\n  try {\n    fs.statSync(path);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Attempt to download WebRTC libraries and headers. If they're unavailable,\n * fallback to building from source.\n * @param {Options} options\n * @returns {Promise}\n */\nfunction downloadOrBuild(options) {\n  var modulePath = computeModulePath(options.binary);\n  if (exists(path.join(modulePath, 'include')) && exists(path.join(modulePath, 'lib'))) {\n    return;\n  } else if (options.skipDownload) {\n    return build(options);\n  }\n  var url = computeUrl(options);\n  console.log(\n    'Attempting to download WebRTC libraries and headers for platform \"%s\" ' +\n    'and architecture \"%s\" from\\n', options.platform, options.arch);\n  console.log('  %s\\n', url);\n  return new Promise(function(resolve, reject) {\n    download(url)\n      .once('error', reject)\n      .pipe(gunzip())\n      .once('error', reject)\n      .pipe(tar.extract(modulePath))\n      .once('error', reject)\n      .once('finish', resolve);\n  }).then(function() {\n    console.log('Complete!');\n  }, function(error) {\n    if (error.statusCode === 404) {\n      if (options.buildWebRTC) {\n        console.log('Binaries unavailable! Falling back to building from source.');\n        build(options);\n        return;\n      }\n      console.error('Binaries unavailable! Try building from source by setting BUILD_WEBRTC=1.');\n    } else {\n      console.error(error);\n    }\n    process.exit(1);\n  });\n}\n\n/**\n * Attempt to build WebRTC libraries from source.\n * @param {Options} options\n * @returns {undefined}\n */\nfunction build(options) {\n  var env = Object.assign({\n    OUT: computeModulePath(options.binary),\n    WEBRTC_REF: options.commit\n  }, process.env);\n  execSync('npm install ' + options.buildWebRTCDependency, {\n    env: env,\n    stdio: 'inherit'\n  });\n}\n\n// Good luck!\ndownloadOrBuild(options);\n"}